import torch
from torchvision.transforms import ToTensor
import torch.nn as nn
import numpy as np
from PIL import Image
import os

stats = ((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))

def denormalize(images,means,stds):
    means = torch.tensor(means).reshape(1,3,1,1)
    stds = torch.tensor(stds).reshape(1,3,1,1)
    return images*stds+means


class MuzNet256(nn.Module):
    def __init__(self,in_channels,num_classes):
        super().__init__()

        """
            Normalizing Layers
        """
        self.norm15 = nn.BatchNorm2d(15)
        self.norm30 = nn.BatchNorm2d(30)
        self.norm60 = nn.BatchNorm2d(60)
        self.norm120 = nn.BatchNorm2d(120)
        self.norm240 = nn.BatchNorm2d(240)
        self.norm480 = nn.BatchNorm2d(480)
        self.norm550 = nn.BatchNorm2d(550)

        """
            Convolutional Layers
        """

        #in: in_channels X 256 X 256
        self.conv15 = nn.Conv2d(in_channels=in_channels,out_channels=15,kernel_size=3,stride=2,padding=1) #--> 15 x 128 x 128
        self.conv30 = nn.Conv2d(in_channels=15,out_channels=30,kernel_size=3,stride=1,padding=1) #--> 30 x 128 x 128

        # conv30 + res30 --> residual block
        self.res30 = nn.Conv2d(in_channels=30,out_channels=30,kernel_size=3,stride=1,padding=1) #--> 30 x 128 x 128

        self.conv60 = nn.Conv2d(in_channels=30,out_channels=60,kernel_size=3,stride=2,padding=1) #--> 60 x 64 x 64
        self.conv120 = nn.Conv2d(in_channels=60,out_channels=120,kernel_size=3,stride=1,padding=1) #--> 120 x 64 x 64

        # conv120 + res120 --> residual block
        self.res120 = nn.Conv2d(in_channels=120,out_channels=120,kernel_size=3,stride=1,padding=1) #--> 120 x 64 x 64
        
        self.conv240 = nn.Conv2d(in_channels=120,out_channels=240,kernel_size=3,stride=2,padding=1) #--> 240 x 32 x 32
        self. conv480 = nn.Conv2d(in_channels=240,out_channels=480,kernel_size=3,stride=1,padding=1) #--> 480 x 32 x 32

        # conv480 + res480 --> residual block
        self.res480 = nn.Conv2d(in_channels=480,out_channels=480,kernel_size=3,stride=1,padding=1) #--> 480 x 32 x 32

        self.conv550 = nn.Conv2d(in_channels=480,out_channels=550,kernel_size=3,stride=2,padding=1) #--> 550 x 16 x 16
        
        self.avgpool = nn.AvgPool2d(2,2) #--> 550 x 8 x 8
        self.flat = nn.Flatten()
        self.linear = nn.Linear(550*8*8,num_classes)

    def forward(self,inputs):

        out = torch.relu(self.norm15(self.conv15(inputs))) #--> 15 x 128 x 128
        
        rb = torch.relu(self.norm30(self.conv30(out))) #
        
        out = torch.relu(self.res30(rb)+rb)
        

        out = torch.relu(self.norm60(self.conv60(out)))
        rb = torch.relu(self.norm120(self.conv120(out)))

        out = torch.relu(self.res120(rb)+rb)

        out = torch.relu(self.norm240(self.conv240(out)))
        rb = torch.relu(self.norm480(self.conv480(out)))

        out = torch.relu(self.res480(rb)+rb)

        out = torch.relu(self.norm550(self.conv550(out)))

        out = self.avgpool(out)
        # print(f"Out shape avgpool: {out.shape}")
        out = self.flat(out)
        # print(f"Out shape flat: {out.shape}")
        out = self.linear(out)
        out = torch.softmax(out,dim=1)

        return out




        



def malware_check(path_to_image):
    size = 256

    img = Image.open(path_to_image)
    img_cls = ["Benign","Malware"]

    if img.size != (size,size):
        img = img.resize((size,size))
    
    transform = ToTensor()
    img_tensor = transform(img)
    img_tensor = img_tensor[:3]
    img_tensor = denormalize(img_tensor,*stats)
    
    img_tensor = torch.reshape(img_tensor, (1,3,size,size))

    model_pred = MuzNet256(3,2)
    model_pred.load_state_dict(torch.load("weights/malware_detect.pth",map_location=torch.device("cpu")))

    pred = model_pred(img_tensor).detach()
    
    pred = np.array(pred[0])
    pred = list(pred)

    max_el = max(pred)

    index_cl = pred.index(max_el)
    result = img_cls[index_cl]

    
    return result,pred[index_cl]
if __name__ == "__main__":
    print(predict("malware_dataset/train/benign/_isdel.exe.png"))